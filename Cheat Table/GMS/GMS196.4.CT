<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="26">
  <CheatEntries>
    <CheatEntry>
      <ID>140</ID>
      <Description>"MSCRC Bypass"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(mscrc_bypass,55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 81 EC ? ? ? ? A1 ? ? ? ? 33 C5 89 ? ? 53 56 57 50 8D ? ? 64 A3 ? ? ? ? 89 ? ? C7 ? ? ? ? ? ? 6A 01 8B 4D ?)
label(_mscrc_bypass)
registersymbol(_mscrc_bypass)

mscrc_bypass: // CWvsContext::OnEnterField: E8 ? ? ? ? 8B ? ? 83 ? ? 8B ? 89 ? ? 8D [First result (CField::Init) &amp; follow call]
_mscrc_bypass:
db 33 C0 C3

[DISABLE]
mscrc_bypass:
_mscrc_bypass:
db 55 8B EC
unregistersymbol(_mscrc_bypass)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>86</ID>
      <Description>"Character Hacks"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>87</ID>
          <Description>"God Mode"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
023EAC10:
db C2 30 00

[DISABLE]
//E8 ? ? ? ? 8D ? ? E8 ? ? ? ? 8B ? ? 64 ? ? ? ? ? ? 59 5E 8B ? 5D C2 1C 00 [follow call]
023EAC10: //E8 ? ? ? ? EB ? 6A 00 6A 01 6A 00 6A 01 [Follow call]
db 55 8B EC
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>89</ID>
          <Description>"Miss God Mode"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Credits to CJ

[ENABLE]
alloc(CUserLocal__SetDamaged_Hook,128)
label(CUserLocal__SetDamaged_Normal)
label(return)

CUserLocal__SetDamaged_Hook:
push 00
push 00
push 00
push 00
push 00
push 00
push 00
push 00
push 00
push 00
push 00
xor edx,edx
call CUserLocal__SetDamaged_Normal
ret 002C

CUserLocal__SetDamaged_Normal:
push ebp
mov ebp,esp
push -01
jmp return

023EAC10: // CUserLocal::SetDamaged
jmp CUserLocal__SetDamaged_Hook
return:

[DISABLE]
//E8 ? ? ? ? EB ? 6A 00 6A 01 6A 00 6A 01 [Follow call]
023EAC10: //E8 ? ? ? ? 8D ? ? E8 ? ? ? ? 8B ? ? 64 ? ? ? ? ? ? 59 5E 8B ? 5D C2 1C 00 [follow call]
db 55 8B EC 6A FF
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>141</ID>
          <Description>"Blink God Mode"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//By eternalzx
[ENABLE]

    define(_GodmodeDelay, 60) //Godmode on delay time. Change it to your precious time
	label(Original)
	label(Return)
	alloc(Hook,100)
	alloc(GodmodeTimer,4)
	label(GodmodeOn)
	GodmodeTimer:
	dd 0

	Hook:
	inc [GodmodeTimer]
	cmp [GodmodeTimer],_GodmodeDelay
	je Original
	db C2 30 00

	GodmodeOn:
	db C2 30 00 6A FF

	Original:
	db 55 8B EC 6A FF
	mov [GodmodeTimer],0
	jmp Return

	023EAC10: //CUserLocal::SetDamaged
	jmp Hook

	Return:

[DISABLE]
023EAC10: //E8 ? ? ? ? 8B CF E8 ? ? ? ? 8B ? ? 8B ? ? 85 C0 75 ? 8B CB E8 ? ? ? ? 84 C0 74 ? 85 FF [First Result Follow Call]
	db 55 8B EC 6A FF

	dealloc(Hook)
	dealloc(GodmodeTimer)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>88</ID>
          <Description>"Boss God Mode"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
011D1E76:
mov eax,1

[DISABLE]
011D1E76: // E8 ? ? ? ? 83 C4 ? C3 CC E8 ? ? FF FF 50 E8 ? ? ? FF 83 C4 ? C3 CC E8 ? ? FF FF 50 [FIRST]
call 00973C70 // update
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>90</ID>
          <Description>"Perfect Stance"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>/*
  Perfect Stance
  Created by AIRRIDE
*/
// v194

[ENABLE]
023ED61B: //85 F6 75 05 39 ? 10 74
xor esi,esi
nop
nop

023ED622: //address of JE below
db EB

[DISABLE]
023ED61B:
db 85 F6 75 05

023ED622:
db 74
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>95</ID>
          <Description>"Flash Jump No Delay"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//  call above is get_flash_jump_count
//  7C ? 33 C0 E9 ? ? 00 00 8B 4D EC E8 ? ? ? ? 85 C0 75 ?
024FDEAE:
db EB

[DISABLE]
024FDEAE:
db 7C
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>124</ID>
          <Description>"Jump Down Anywhere"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Credits Yuri

[ENABLE]
023CD258:
db 90 90

[DISABLE]
// inside CUserLocal::FallDown
023CD258: //74 ? 8B CB C7 83 ? ? ? ? 01 00 00 00 E8 ? ? ? ? 85 C0 75 ? 89 B3 ? ? ? ? EB ? 8B CB E8 ? ? ? ? 89 83 ? ? ? ? 6A 01
db 74 5A
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>123</ID>
          <Description>"Map Rusher"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]
Alloc(InGameRush, 128)
Alloc(TeleportToPortal, 128)

Label(Return)
Label(End)

0237B8EF: //89 ? ? ? ? ? 81 ? ? ? ? ? 3F 42 0F 00 75
jmp InGameRush
db 90
Return:

InGameRush:
push eax
call TeleportToPortal
mov [edi+00014A80],eax
jmp Return

TeleportToPortal:
push ebp
mov ebp, esp
push esi
mov esi,[ebp+08]
test esi, esi
js End
mov ecx,[033C1D3C] // CUserLocal 8B 3D ? ? ? ?  8B CF F3
mov [ecx+00015774],1 // AutoPortal  89 81 ? ? ? 00 5D C2 04 00 8B 81 ? ? ? 00 C3 CC CC CC CC CC CC CC CC CC C7
mov ecx,[033C3EA8] // PortalBase 8B 3D ?? ?? ?? ?? 8B 47 ?? 85 C0
mov eax,017C4D40 //CPortalList::GetPortal() Two calls Down OR 55 8B EC 8B ? 08 85 D2 78 ? 8B ? 04 85 C0 74 ? 3B ? ? 73 ? 8B ? ? ? 5D
push esi
xor edx, edx
call eax
test eax, eax
je End
push [eax+4]
mov ecx,[033C1D3C] // CUserLocal 8B 3D ? ? ? ?  8B CF F3
mov [ecx+00015774],1 // AutoPortal  75 07 8B CE E8 ? ? ? ? 6A 00 8B CE E8 ? ? ? ? 5E
mov eax,0245DDF0 //CUserLocal::MoveToPortal() 55 8B EC 6A 01 6A 00 6A 01 FF ? ? 6A 00
xor edx, edx
call eax
End:
mov eax, esi
pop esi
pop ebp
ret 0004

 //Fix to Maprusher getting "stuck" i.e quest requirement map like T.O.T or Cygnus Garden
//0211E656: //  0F 84 ? ? 00 00 89 87 ? ? ? ? 85
//db 90 90 90 90 90 90

//Fix to Maprusher getting "stuck"
0237B8D4: //  75 ? 8B 0D ? ? ? ? 8D 87 [SECOND]
db 90 90

00CDC173: // 1st result 6A ?? E8 ?? ?? ?? ?? 8B ?? E8 ?? ?? ?? ?? C7 ?? ?? ?? ?? ?? ?? 8D ?? ??
db 90 90 90
db 90 90 90
db 90 90 90 90
db 90 90 90 90

00CDABC0: //  1st result 75 ? E8 ? ? ? ? 85 C0 74 ? 6A 01
db 90 90

[Disable]
DeAlloc(InGameRush)
DeAlloc(TeleportToPortal)

0237B8EF:
mov [edi+00014A80],eax

//0211E656:
//db 0F 84 C3 05 00 00

0237B8D4:
db 75 1F

00CDC173:
push 00
call 00CE0530
mov ecx,eax
call 0248ADA0

00CDABC0:
db 75 2C
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>142</ID>
          <Description>"No Breath"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
00F33F06: //79 ? 8B ? C7 87 ? ? ? ? 00 00 00 00 E8 ? ? ? ? 83 ? ? 83 ? ? 75 ? 8B CF E8 ? ? ? ? 8B 17 83 E0 01 6A 00
    db 78

[disable]
 00F33F06:
    db 79
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>93</ID>
          <Description>"GND"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(MachGND,02403805) //  8B 95 ? ? ? ? 89 95 ? ? ? ? 8B 85 ? ? ? ? 50 E8 ? ? ? ? 83 C4 ? 85 C0 0F 85 ? ? ? ? 83 BD ? ? ? ? ? 0F 85 ? ? ? ? 8B

[ENABLE]
MachGND://Mach GND (Melee/Basic attacks)
db 8A

[DISABLE]
MachGND:
db 8B
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"Unlimited Attack"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//7E ? 83 ? ? 7D ? 8B ? ? 2B C2 3D 6A FF FF FF 7E ? 3D 96 00 00 00 7D ? 8B ? ? 3B ? ? 7C ?
define(UnlimitedAttack, 024D6881) // 1st jle from int CAntiRepeat::TryRepeat(long,long)
[Enable]
UnlimitedAttack:
db EB

[Disable]
UnlimitedAttack:
db 7E
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"Auto Attack"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>/*
(original keypress functions ripped from Francesco/AIRRIDE Kami)
*/

[enable]
define(KEY_NORMAL,0)
define(KEY_EXTENDED,1)

define(VK_CONTROL,11)
define(VK_RSHIFT,A1)
define(VK_INSERT,2D)
define(VK_DELETE,2E)
define(VK_HOME,24)
define(VK_END,23)
define(VK_PRIOR,21)
define(VK_NEXT,22)

define(_HoldAttack,1) //Set flag to 1 for combos, 0 for normal attacks
define(_AttackKey,VK_CONTROL) //Choose your key here after defining vk code
define(_AttackKeyType,KEY_EXTENDED)   //
define(_AttackDelay,1) //Set delay in milliseconds

alloc(AutoAttack,512)
alloc(PressKey,128)
alloc(HoldAttack,1)
alloc(AttackDelay,4)
label(Exit)

define(KEY_PRESS,0)
define(KEY_UP,1)
define(MAPVK_VK_TO_VSC,0)

AttackDelay:
dd 0

PressKey:
push ebx
push edx
push esi
push ecx
mov edx, [esp+10+4]
mov esi, [esp+10+8]
mov ebx, [esp+10+C]
mov ecx, edx
push MAPVK_VK_TO_VSC
push ecx
call MapVirtualKeyA
shl eax,#16
shl esi,#24
shl ebx,#31
or eax, esi
or eax, ebx
mov ecx,eax
push ecx
push edx
call 02721990        //55 8B EC 8B 0D ? ? ? ? 85 C9 74 ? 83 C1 04 8B 01 5D FF 20
pop ecx
pop esi
pop edx
pop ebx
ret 000C

AutoAttack:
cmp dword ptr [esp],0246B438 //8D 90 ?? ?? ?? ?? 83 ? ? 72 ? 3D D2 07 00 00 75 ? 80
pushad
jne Exit
test eax,eax
je Exit
test eax,eax
inc [AttackDelay]
cmp [AttackDelay],_AttackDelay
jne Exit
mov [AttackDelay],0
push KEY_PRESS
push _AttackKeyType
push _AttackKey
call PressKey
cmp byte ptr [HoldAttack], 1
je Exit
nop
push KEY_UP
push _AttackKeyType
push _AttackKey
call PressKey
jmp Exit

Exit:
popad
jmp 023C6220

02F0561C:
dd AutoAttack

[disable]
02F0561C: // 4 Byte Scan
dd 023C6220 //55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 83 EC 08 56 A1 ? ? ? ? 33 C5 50 8D ? ? 64 A3 00 00 00 00 8B 0D ? ? ? ? 85 C9 74 ? 8D

dealloc(AutoAttack)
dealloc(PressKey)
dealloc(HoldAttack)
dealloc(AttackDelay)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>143</ID>
          <Description>"Auto HP/MP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(CTRL,001D0000)
define(SHIFT,002A0000)
define(INSERT,01520000)
define(DEL,01530000)
define(HOME,01470000)
define(END,014F0000)
define(PAGEUP,01490000)
define(PAGEDOWN,01510000)
define(ALT,00380000)

//Change HP and MP Values to your preferred settings

Alloc(Hook, 124)
Alloc(HP, 4)
Alloc(MP, 4)
Label(Return)
Label(UseHP)
Label(UseMP)
Label(End)
define(HP,#1000)    //hp point
define(MP,#1000)   //mana point
define(HealthKey, 01530000)  //delete key
define(ManaKey, 014F0000)    //end key

Hook:
mov eax,[033A5C48] // CWvsContext 8B 0D ? ? ? ? 50 E8 ? ? ? ? 8D ? ? E8 ? ? ? ? 8B
mov eax,[eax+2260] // ZRef&lt;CharacterDat a&gt; 8D ? ? 53 56 57 50 E8 [Follow call]
push esi

// Check HP
mov esi,[eax+5A] // _ZtlSecureTear_nHP[1]
rol esi,05
xor esi,[eax+56] // _ZtlSecureTear_nHP[0]
cmp esi, HP // HP Value
jle UseHP

// Check MP
mov esi,[eax+72] // _ZtlSecureTear_nMP[1]
rol esi, 05
xor esi,[eax+6E] // _ZtlSecureTear_nMP[0]
cmp esi, MP // MP Value
jle UseMP
jmp End

UseHP:
pushad
mov ebx,HealthKey // Change Key For HP
call PressKey
popad
jmp End

UseMP:
pushad
mov ebx,ManaKey // Change Key For MP
call PressKey
popad
jmp End

End:
pop esi
push ebp // Original Opcode
mov ebp,esp // Original Opcode
push -01 // Original Opcode
jmp Return

PressKey:
mov esi,[033A5C48] // TSingletonCWvsContext 8B 0D ?? ?? ?? ?? 50 E8 ?? ?? ?? ?? 8D 4D ?? E8 ?? ?? ?? ?? 8B 4D ?? 64 89 0D ?? ?? ?? ?? 59
mov ecx,[esi+A4]
push ebx
push 00
call 02721990 // CWndMan::OnKey 55 8B EC 8B 0D ?? ?? ?? ?? 85 C9 74 ?? 83 C1 ?? [First]
ret

011C3E10: // CField::Update
jmp Hook
Return:

[disable]
DeAlloc(Hook)
DeAlloc(HP)
DeAlloc(MP)

011C3E10: //[START] 3D B8 0B 00 00 76 ? 6A
push ebp
mov ebp,esp
push -01
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>105</ID>
      <Description>"Mob Hacks"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>106</ID>
          <Description>"Mob Disarm"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// MOB DISARM
[ENABLE]
015BC472: //75 ? 8D ? ? 8B ? E8 ? ? ? ? 8B ? E8 ? ? ? ? 85 ? 0F 84 ? ? ? ? 8B
jmp 015BCA6C //8B ? ? ? ? ? 85 C0 0F 84 ? ? 00 00 2B ? 0F 89 ? ? ? ? C7 ? ? 00 00 00 00 8D 85 ? ? ? ? C7 45 ? ? ? ? [SECOND]
//backtrack from jmp above

[DISABLE]
015BC472:
db 75 0A 8D 50 FA
mov ecx, edi
call 0161C920 //update call as well
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>111</ID>
          <Description>"Mob Aggro"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>/*
  Auto Aggro
  Creator Sprux
*/
[ENABLE]
alloc(Aggro,128)
label(return)

Aggro:
mov eax,[033C1D3C] // CUserLocal: 8B 3D ? ? ? ?  8B CF F3 ? ? ? 8B ? ? 66 ? ? 45 ? 89 45 EC E8 ? ? ? ? 8B 5D E0 85 C0 74 5C 81 FB ? ? ? ?
lea eax,[eax+04]
mov [ecx+000004C8+08],eax // Aggro Offset: 83 BE ? ? ? ? 00 0F 85 ? ? 00 00 8B CE E8 ? ? ? ? 85 C0 74 [Offset+0x08]

push ebp
mov ebp,esp
push -01
jmp return

02650FE0: // CVecCtrlMob::WorkUpdateActive
jmp Aggro
return:

[DISABLE]
02650FE0: //55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 83 EC ? 56 57 A1 ? ? ? ? 33 C5 50 8D ? ? 64 A3 00 00 00 00 8B F9 89 ? ? 8B ? FF
push ebp
mov ebp,esp
push -01

dealloc(Aggro)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>109</ID>
          <Description>"Mob Vac"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(hook,128)
label(return)

hook:
mov [esp+4],#9 //nAction
mov [esp+14],#17 //nMoveType
mov [esp+38],#1 //bAirhit

//Vac to Char X
mov eax,[033C1D3C] //CUserLocal: 8B 3D ? ? ? ?  8B CF F3
mov eax,[eax+156A8] //Character X Location Offset: 8d 86 ? ? ? ? 8b cf 50 e8 ? ? ? ? 5f 5e 5b
add eax,#150 //Adjust X
mov [esp+18],eax //nMoveEndingX

//Vac to Char Y
mov eax,[033C1D3C] //CUserLocal: 8B 3D ? ? ? ?  8B CF F3
mov eax,[eax+156A8+4] //Character X Location Offset+4: 8d 86 ? ? ? ? 8b cf 50 e8 ? ? ? ? 5f 5e 5b
add eax,#0 //Adjust Y
mov [esp+1C],eax //nMoveEndingY
//Original Opcodes
push ebp
mov ebp,esp
push -01
jmp return

// [NEW AOB] 81? EB 20 42 01 74 ? 81 ? 02 1D 42 01 74[FUNCTION START]
015E54A0: //  55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 81 EC ? ? ? ? A1 ? ? ? ? 33 C5 89 45 ? 53 ? ? 50 8D 45 F4 64 A3 00 00 00 00 8B F9 89 BD 3C FF FF FF
jmp hook
return:

[DISABLE]
015E54A0:
push ebp
mov ebp,esp
push -01
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>107</ID>
          <Description>"Vellum Freeze v2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
015DC470: // 55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 81 EC ? ? 00 00 A1 ? ? ? ? 33 C5 89 45 ? 53 56 57 50 8D 45 F4 64 A3 00 00 00 00 8B D9 89 5D EC 8B ? ? ? 00 00 [FUNCTION START]
ret 0004


[disable]
015DC470:
db 55 8B EC
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>108</ID>
          <Description>"Mob Freeze"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(CMob__IsRisingByToss_Hook,128)
label(Return_True)

CMob__IsRisingByToss_Hook:
je Return_True
jmp 01514290+7

Return_True:
mov eax,00000001
ret

015E92E0: // CMob::IsRisingByToss
jmp CMob__IsRisingByToss_Hook
db 90 90

[DISABLE]
015E92E0: //83 B9 ? ? ? ? 00 75 ? 83 B9 ? ? ? ? 00 74 ? 8B 89 ? ? ? ? 8D ? ? F7 D9 1B C9 23 C8 E8 ? ? ? ? 85 C0 75 ?
cmp dword ptr [ecx+00000A30],00

dealloc(CMob__IsRisingByToss_Hook)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>110</ID>
          <Description>"Mob Control"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// 00 Doesn't seem to do anything but Disconnect to world selection screen
// 01 Normal Mobs
// 02 Jump mob
// 03 Fly Mobs
// 04 Stationary Mobs
// 05 Mob Walk Right
// 06-07-08 Lemmings
// 09 and above crash MapleStory with "error code: -2147467259 (Unspecified error)"

define(action,06) // change action here

[ENABLE]
alloc(MobControl,128)

MobControl:
mov [edi+000004C8],action
mov eax,[edi+000004C8]
jmp 02655DD0+6

02655DD0:
jmp MobControl
db 90

[DISABLE]
02655DD0: // CVecCtrlMob::WorkUpdateActive: E9 ? ? ? ? 8B ? ? ? 00 00 83 ? ? 0F ? ? ? ? ? FF [Address below]
mov eax,[edi+000004C8]

dealloc(MobControl)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>144</ID>
      <Description>"Familiar / Pet Hacks"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>118</ID>
          <Description>"Auto Familiar (Jr Boogie)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Credit kevintjuh93 for familiar offsets

[ENABLE]
alloc(hook,222)
alloc(summon_familiar,128)
label(ending)
label(return)

hook:
pushad
mov edi,[033C1D3C] //CUserlocal 8B 3D ? ? ? ?  8B CF F3
mov edi,[edi+000150B4] //apFamiliar 8B 87 ? ? ? ? 8B ? ? 04 8B ? ?  89 ? ? 85
cmp [edi+04],00 // Value = 0 when familiar is not summoned
jne ending
call summon_familiar
ending:
popad
mov fs:[00000000],eax //Original OP
jmp return

summon_familiar: // 8B 0D ? ? ? ? 50 E8 ? ? ? ? 8D ? ? E8 ? ? ? ? 8B
mov ecx,[033A5C48]
push 0097FAA2 //Familiar
call 027E0000 //Call below using AOB above
ret

015E54C8: //GenerateMovePath Function (script won't execute unless theres mobs)
jmp hook
nop
return:

027E00F0:: //Summon Familiar While Soaring
db EB

0118FD60: //Familiar Disarm
ret

0259EFC0: //No Blue Box (so you don't crash on rope/etc)
ret

[DISABLE]
dealloc(hook)

015E54C8: // 3D E4 69 88 00 B9 01 00 00 00 [SECOND FS BELOW FUNCTION START]
mov fs:[00000000],eax

027E00F0: //74 ? 8B 80 ? ? ? ? 83 F8 01 74 ? 83 F8 02 75
db 74

0118FD60: //  81 C1 88 13 00 00 3B [FIRST] [FUNCTION START]
push ebp

//E8 ? ? ? ? 8B C8 E8 ? ? ? ? E8 ? ? ? ? 83 C4 1C 33 F6 EB [FIRST 2 CALLS BELOW]
0259EFC0: //55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 83 EC ? 53 56 57 A1 ? ? ? ? 33 C5 50 8D ? ? 64 A3 00 00 00 00 C7 ? ? 00 00 00 00 E8 ? ? ? ? 83 7D ? 00 75 ? [3 CALLS BELOW]
push ebp
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>121</ID>
          <Description>"Jr Boogie Unlimited MP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(Restore_MP,#35000)

[ENABLE]
Alloc(GetMP,128)
Alloc(Hook,128)
Alloc(MP_Value,4)
Label(Return)
Label(Normal)
Label(return)

GetMP:
mov [MP_Value],esi
mov [ebx+214],esi
jmp return

021365ED: //  89 ? ? ? 00 00 50 8D ? ? E8 ? ? ? ? 8B ? ? C7
jmp GetMP
nop
return:

Hook:
cmp [MP_Value],Restore_MP
jg Normal
mov [esi+170],eax
jmp Return

Normal:
cmp [esi+170],eax
jmp Return

// 39 86 ? ? 00 00 7F ? 8B CE E8 [new AOB?]
0118FC05: //  39 ?? ? ? 00 00 7F ? 8B CE E8 ? ? ? ? 8B ?? ? ? 00 00 [first]
jmp Hook
nop
Return:

[DISABLE]
021365ED:
mov [ebx+214],esi

0118FC05:
cmp [esi+170],eax

dealloc(Hook)
dealloc(GetMP)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>125</ID>
          <Description>"Fast Pet Item Vac"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(GetItemXY,128)
alloc(ItemX,4)
alloc(ItemY,4)
registersymbol(ItemX)
registersymbol(ItemY)

Alloc(Hook,128)
Label(Return)
label(exit)

GetItemXY:
mov [ItemX],eax
call 00852220
mov [ItemY],eax
ret

0112DB36:
call GetItemXY

Hook:
mov edi,ecx
push ecx
mov ecx,[033C9B14] //E8 ? ? ? ? 85 C0 74 ? 8B 0D ? ? ? ? 8D ? ? ? 00 00 ? 8D [mov below]
cmp [ecx+14],#0
pop ecx
je exit
push [ItemY]
push [ItemX]
lea ecx,[ebx+10]
call 00E5B730 //IWzShape2D::Move 55 8B EC 56 57 FF 75 ? 8B ? FF 75 ? 57 8B 07 FF ? ? 8B F0 [FIRST]
exit:
mov ecx,ebx
call 00CADEF0
jmp Return

01794F3D:
jmp Hook
Return:


[DISABLE]
0112DB36: //55 8b ? ? ? 8b ? 8d ? ? e8 ? ? ? ? 8b ? ? 8b ? 89 ? e8 [2nd call below]
call 00852220

01794F3D: // 7E ? 85 FF 74 ? 8B ? E8 ? ? ? ? EB (call below)
call 00CADEF0


dealloc(ItemHook)
dealloc(ItemX)
dealloc(ItemY)
unregistersymbol(ItemX)
unregistersymbol(ItemY)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>120</ID>
          <Description>"Familiar Disarm"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
0118FD60:
ret

[DISABLE]
0118FD60: //  81 C1 88 13 00 00 3B [FIRST] [FUNCTION START]
push ebp
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>91</ID>
      <Description>"Skill Hacks"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>102</ID>
          <Description>"Unlimited Arrow Platter"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>
[Enable]
0121B5C0: //Unlimited Arrow Platter
ret 004

[Disable]
0121B5C0: // [FUNCTON START] 0F 8E ? ? 00 00 8B CE E8 ? ? ? ? 50 89
push ebp
mov ebp,esp
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>103</ID>
          <Description>"Arrow Platter No Delay"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// v194

define(delay, #100000) //Adjust Delay to Spawn Rate

[Enable]
Alloc(Hook,123)
Label(Return)
Label(Exit)

alloc(timer,4)

Hook:
pushad
//  74 ? E8 ? ? ? ? 50 FF ? ? E8 ? ? ? ? 83 C4 08 84 C0 74
call 0257DCC0 //get_update_time (using this instead of actual function delay because its timer is sort of werid)
mov edx,eax
sub edx,[timer]
cmp edx,delay
popad
jl Exit
mov [timer],eax
jmp 0121843A //disable address +6

Exit:
jna 0121844D //Jump to exit so you don't jump back ontop of more delay.

01218434:
jmp Hook
nop
Return:

[Disable]
Dealloc(Hook)

01218434: // [above] 76 13 6A 00 8D
sub ecx,edx
cmp ecx,eax
jna 0121844D

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>101</ID>
          <Description>"Monkey Spirit No Delay"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//Created by DBLmao

alloc(Hook,100)
label(Return)
label(Original)

Hook:
push eax
mov eax,[033C8638] //8B 0D ? ? ? ? 8D 85 ? FF FF FF 6A 00 6A 00 [FIRST] CHECK SECOND
cmp [eax+10],00
pop eax
jle Original
mov [esi+00016060],#42120003 // [offset from below]
mov [esi+00016060+4],#55 // [offset from below]

Original:
cmp dword ptr [esi+00016060],00 // [offset from below]
jmp Return

0252798E: //83 BE ? ? ? ? 00 0F 84 ? ? 00 00 2B 86 ? ? ? ? 0F 88 ? ? 00 00 8B
jmp Hook
db 90 90
Return:

025009D5: //74 ? 8B ? ? 3B ? ? 7C ? 8B ? ? ? ? ? 53 E8 ? ? ? ? [JL BELOW]
db 90 90

[DISABLE]
0252798E:
cmp dword ptr [esi+00016060],00 //[update offset in brackets as well]

025009D5:
db 7C 35

dealloc(Hook)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>139</ID>
          <Description>"Grenade Kami (Summoned Skills Kami)"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(Hook,128)
alloc(GetMobXY,128)
alloc(MobX,4)
alloc(MobY,4)
registersymbol(MobX)
registersymbol(MobY)
label(GetMobXY_Return)
label(Return)

GetMobXY:
push eax
//89 87 ? ? ? ? 8D ? ? ? ? ? 8B ? ? 89 ? ? 89 ? ? 8A ? ?
mov eax,[ecx+8F8] // E8 ? ? ? ? E8 ? ? ? ? 89 87 ? ? 00 00 8D 87 [FIRST RESULT] [OFFSET BELOW]
mov [MobX],eax
mov eax,[ecx+8FC] // E8 ? ? ? ? E8 ? ? ? ? 89 87 ? ? 00 00 8B 87 [FIRST RESULT] [OFFSET BELOW]
mov [MobY],eax
pop eax

//Original
push ebp
mov ebp,esp
push -01
jmp GetMobXY_Return

02650FE0: // CVecCtrlMob::WorkUpdateActive
//55 8B EC 6A ? 68 ? ? ? ? 64 ? ? ? ? ? 50 83 ? ? 56 57  A1 ? ? ? ? 33 C5 50 8D ? ? 64 ? ? ? ? ? 8B F9 89 ? ? 8B ? FF ? ? FF
jmp GetMobXY
GetMobXY_Return:

Hook:
mov edi,esi
push [MobY]
push [MobX]
lea ecx,[edi+10]
call 00E5CCE0 //  IWzShape2D::Move 55 8B EC 56 57 FF 75 ? 8B ? FF 75 ? 57 8B 07 FF ? ? 8B F0 [FIRST]
mov ecx,esi
//  Original Opcode
call 00CADEF0  //  CVecCtrl::UpdateActive
//56 8B F1 57 8B ? FF ? ? 8B ? 85 FF
jmp Return

0141EEB4:
jmp Hook
Return:

[DISABLE]
02650FE0: // 55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 83 EC ? 56 57 A1 ? ? ? ? 33 C5 50 8D ? ? 64 A3 00 00 00 00 8B F9 89 ? ? 8B ? FF
push ebp
mov ebp,esp
push -01

0141EEB4: //E8 ? ? ? ? FF B3 ? ? 00 00 E8 ? ? ? ? 83 C4 04 85 C0 0F 84
call 00CADEF0

dealloc(Hook,128)
dealloc(GetMobXY,128)
dealloc(MobX,4)
dealloc(MobY,4)
unregistersymbol(MobX)
unregistersymbol(MobY)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"Dragon Breath Fusion Attack"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
01122E31:
db 0F 84

[DISABLE]
01122E31: //0f 85 ? ? ? ? ff 15 ? ? ? ? 8b c3
db 0F 85
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>94</ID>
          <Description>"Instant Final Psychic Smash"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>
[ENABLE]
023B3F66:
db 75

[DISABLE]
023B3F66:		 //74 65 0F 1F ? ? 00 00 00 00
db 74
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>104</ID>
          <Description>"Blaster Infinite Bullets"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Original credits OuterHaven
// v194
[enable]
aobscan(bullet_check,0F 84 ? ? 00 00 8D ? ? E8 ? ? ? ? 84 C0 0F 84 ? ? 00 00)
label(_bullet_check)
registersymbol(_bullet_check)

bullet_check:
_bullet_check: //Infinite Bullets
db 0F 85

[disable]
bullet_check:
_bullet_check: //0F 84 ? ? 00 00 8D ? ? E8 ? ? ? ? 84 C0 0F 84 ? ? 00 00
db 0F 84
unregistersymbol(_bullet_check)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"Instant Final Slash"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>
[ENABLE]
//Uses the final part of the "Enchanced Lash"/Demon Awakening skill for Demon slayers.
//Required:5th job

023F9757:
push 17D7AF0A


[DISABLE]
023F9757: //68 C4 05 D9 01 FF
push 01D905C4
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>96</ID>
          <Description>"No Cooldown"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//  81 ? 53 24 14 00 75 08 [function start and breakpoint]
//  FF 75 0C E8 ? ? 08 00 5E 5D C2 08 00 FF 75 0C E8 ? ? 08 00 [Second Result] [Follow Call]

[enable]
0246CC10: //Ignore Skill Cooldown (Some Skills)
ret 04

[disable]
0246CC10: //55 8B EC 83 EC 18 53 56 57 89 4D ? ? ? ? ? ? 50 ? ? ? 2E 4A
          //55 8B EC 83 EC 18 53 56 57 89 4D ? ? ? ? ? ? 50 ? ?  [third Result]
push ebp
mov ebp,esp
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>92</ID>
          <Description>"Skill Inject"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>
[ENABLE]
alloc(skill_id_hook,128)
label(skill_id_return)
label(normal)
define(skill_id,#61121104) //Change #00000000 to your skillID
define(skill_delay,#10)    //Change delay

alloc(delay,8)

timer:
dd 00

02506F15: //[1st addy]
db 90 90 90 90 90 90

02506F21: //[2nd addy]
db 90 90 90 90 90 90

02506F0E: //[3rd addy]
jmp skill_id_hook
nop
nop
skill_id_return:

skill_id_hook:
call GetTickCount
mov edx,eax
sub edx, [timer]
cmp edx,skill_delay
jl normal
mov [timer],eax
mov [esi+00015284],skill_id //3rd addy dword ptr
jmp skill_id_return
normal:
cmp dword ptr [esi+00015284],00 //3rd addy dword ptr
jmp skill_id_return

02506F94:  //[4th addy]
db 90 E9

0250710D: //[5th addy]
db 90 90 90 90 90 90

0250711A: //[6th addy]
jmp 0250714D //[7th addy] 81 BE ? ? ? ? E2 FE 7E 01 8B CE 75 ? 6A 00 6A 00 6A 04 57 FF ? ? E8 ? ? ? ? 5F C7 ? ? ? ? ? 00 00 00 00 5E ?
dw 90 90

[Disable]
02506F15: //[1st addy] 0F 84 ? ? ? ? 2B 9E ? ? ? ? 0F 88 ? ? ? ? 8B 0D ? ? ? ? 85 C9 74 ? 8B ? ? 83 ? ? 68 ? ? ? ? FF 50 64 85 C0
db 0F 84 1F 03 00 00

02506F21: //[2nd addy] JS Below first addy^(0F 88 ? ? ? ? 8B 0D ? ? ? ? 85 C9 74 ? 8B ? ? 83 ? ? 68 ? ? ? ? FF 50 64 85 C0)
db 0F 88 13 03 00 00

02506F0E: //[3rd addy] cmp dword ptr above first addy^^ (83 BE ? ? ? ? 00 0F 84 ? ? ? ? 2B 9E ? ? ? ? 0F 88 ? ? ? ? 8B 0D ? ? ? ? 85 C9 74 ? 8B ? ? 83 ? ? 68 ? ? ? ? FF 50 64 85 C0)
cmp dword ptr [esi+00015284],00 //update ptr in brackets here as well

02506F94: //[4th addy] 0F 84 ? ? ? ? 8B 06 8B CE FF 50 ? 3D 10 27 00 00 74 ? 3D 74 27 00 00 74 ? 3D 7E 27 00 00 74 ? 3D 7F 27 00 00 74 ?
db 0F 84 F8 00 00 00

0250710D: //[5th addy] 0F 87 ? ? ? ? 0F B6 ? ? ? ? ? FF 24 ? ? ? ? ? 84 DB 74 ? 8B 8E ? ? ? ? 85 C9 0F 84 ? ? ? ? 57 FF ? ? E8 ? ? ? ? 5F
db 0F 87 1D 01 00 00

0250711A: //[6th addy] jmp dword ptr below the 5th addy ^ (FF 24 ? ? ? ? ? 84 DB 74 ? 8B 8E ? ? ? ? 85 C9 0F 84 ? ? ? ? 57 FF ? ? E8 ? ? ? ? 5F)
jmp dword ptr [ecx*4+02507244] //update the addy in the brackets here as well

dealloc(skill_id_hook)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>112</ID>
      <Description>"Misc Hacks"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>114</ID>
          <Description>"Auto Terminate"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
//By DavHeed, ButterSmooth, at Moopler
//auto kill maple when user enters field
//threshold of people count is set on enable
alloc(hook, 128)
Label(skip)

02538550:
jmp hook

hook:
cmp ebx,eax
je skip
pushad
push 0
push ffffffff
call TerminateProcess
test eax,eax
popad
jnz skip
xor eax,eax
div eax

skip:
jmp 025387DB //first je/jmp in CUserPool::OnUserEnterField

[disable]
02538550:   //CUserPool::OnUserEnterField 8D 4D D8 E8 ? ? ? ? 8D 4D D0 E8 ? ? ? ? 8B 4D F4 64 89 0D ? ? ? ? [Function Start]
push ebp
mov ebp,esp
push -01

//cmp esi,eax
//je 025387DB  //first je/jmp in above function
DeAlloc(hook)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113</ID>
          <Description>"Item Filter"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(ItemFilter,256)
alloc(ItemList,2048)
alloc(Mesos,4)
alloc(Mode,4)
label(Return)
label(End)
label(FilterMesos)
label(RejectOrAccept)
label(AcceptFilter)
label(RejectFilter)
label(Ignore)

Mesos:
dd #0 // Minimum meso

Mode:
dd #1 // 0 = Accept, 1 = reject

ItemList:
//Credit TymeGyzmo for list

//Add filter like below
//dd #itemID

dd #4006000 // The Magic Rock
dd #4006001 // The Summoning Rock
dd #4001094 // Nine Spirit's Egg
dd #2060000 // Arrow for Bow
dd #2060001 // Bronze Arrow for Bow
dd #2060002 // Steel Arrow for Bow
dd #2060003 // Red Arrow for Bow
dd #2060004 // Diamond Arrow for Bow
dd #2060008 // Quality Arrow for Bow
dd #2060009 // Strong Arrow for Bow
dd #2060010 // Sharp Arrow for Bow
dd #2060011 // Titanium Arrow for Bow
dd #2060013 // White Gold Medium Arrows
dd #2061000 // Arrow for Crossbow
dd #2061001 // Bronze Arrow for Crossbow
dd #2061002 // Steel Arrow for Crossbow
dd #2061003 // Blue Arrow for Crossbow
dd #2061004 // Diamond Arrow for Crossbow
dd #2061006 // Quality Arrow for Crossbow
dd #2061007 // Strong Arrow for Crossbow
dd #2061008 // Sharp Arrow for Crossbow
dd #2061009 // Titanium Arrow for Crossbow
dd #2510165 // Sharp Arrow for Bow Recipe
dd #2510166 // Sharp Arrow for Crossbow Recipe
dd #2510167 // Titanium Arrow for Bow Recipe
dd #2510168 // Titanium Arrow for Crossbow Recipe
dd #2510568 // Amaterasu's Nimbus Sword Recipe
dd #2510569 // Amaterasu's Weeping Spirit Sword Recipe
dd #2510570 // Amaterasu's Axe of a Thousand Blades Recipe
dd #2510571 // Amaterasu's Smoldering Spirit Axe Recipe
dd #2510572 // Amaterasu's Golden Slice Recipe
dd #2510573 // Amaterasu's Mace of Ruin Recipe
dd #2510574 // Amaterasu's Final Wind Recipe
dd #2510575 // Amaterasu's Pelting Rain Recipe
dd #2510576 // Amaterasu's Muramasa Recipe
dd #2510577 // Oyamatsumi's Fire Spirit Bow Recipe
dd #2510578 // Oyamatsumi's Piercing Insight Recipe
dd #2510579 // Oyamatsumi's Dragon Bow Recipe
dd #2510580 // Ame-no-Uzume's Crooked Soul Staff Recipe
dd #2510581 // Ame-no-Uzume's Sinister Spirit Hand Recipe
dd #2510582 // Ame-no-Uzume's Red Flower Recipe
dd #2510583 // Tsukuyomi's Execution Sword Recipe
dd #2510584 // Tsukuyomi's Fist of Malice Recipe
dd #2510586 // Tsukuyomi's Wraith Hand Recipe
dd #2510587 // Susano-o's Baleful Blaster Recipe
dd #2510588 // Susano-o's Bloodstained Sword Recipe
dd #2510589 // Susano-o's Solar Cannon Recipe
dd #2510590 // Amaterasu's Helm Recipe
dd #2510591 // Amaterasu's Gloves Recipe
dd #2510592 // Amaterasu's Shoes Recipe
dd #2510593 // Amaterasu's Armor Recipe
dd #2510594 // Amaterasu's Cape Recipe
dd #2510595 // Oyamatsumi's Helm Recipe
dd #2510596 // Oyamatsumi's Gloves Recipe
dd #2510597 // Oyamatsumi's Shoes Recipe
dd #2510598 // Oyamatsumi's Armor Recipe
dd #2510599 // Oyamatsumi's Cape Recipe
dd #2510600 // Ame-no-Uzume's Helm Recipe
dd #2510601 // Ame-no-Uzume's Gloves Recipe
dd #2510602 // Ame-no-Uzume's Shoes Recipe
dd #2510603 // Ame-no-Uzume's Armor Recipe
dd #2510604 // Ame-no-Uzume's Cape Recipe
dd #2510605 // Tsukuyomi's Helm Recipe
dd #2510606 // Tsukuyomi's Gloves Recipe
dd #2510607 // Tsukuyomi's Shoes Recipe
dd #2510608 // Tsukuyomi's Armor Recipe
dd #2510609 // Tsukuyomi's Cape Recipe
dd #2510610 // Susano-o's Helm Recipe
dd #2510611 // Susano-o's Gloves Recipe
dd #2510612 // Susano-o's Shoes Recipe
dd #2510613 // Susano-o's Armor Recipe
dd #2510614 // Susano-o's Cape Recipe
dd #2510723 // Ame-no-Uzume's Scepter Recipe
dd #2510771 // Ame-no-Uzume's Shining Rod Recipe
dd #2510772 // Susano-o Rainbow Shooter Recipe
dd #2511159 // Amaterasu's Belt Recipe
dd #2511160 // Amaterasu's Epaulet Recipe
dd #2511161 // Oyamatsumi's Belt Recipe
dd #2511162 // Oyamatsumi's Epaulet Recipe
dd #2511163 // Ame-no-Uzume's Belt Recipe
dd #2511164 // Ame-no-Uzume's Epaulet Recipe
dd #2511165 // Tsukuyomi's Belt Recipe
dd #2511166 // Tsukuyomi's Epaulet Recipe
dd #2511167 // Susano-o's Belt Recipe
dd #2511168 // Susano-o's Epaulet Recipe
dd #2512000 // Strength Potion III Recipe
dd #2512001 // Strength Potion IV Recipe
dd #2512002 // Strength Potion V Recipe
dd #2512003 // Strength Potion VI Recipe
dd #2512004 // Strength Potion VII Recipe
dd #2512005 // Strength Potion VIII Recipe
dd #2512006 // Strength Potion IX Recipe
dd #2512007 // Strength Potion X Recipe
dd #2512008 // Dexterity Potion III Recipe
dd #2512009 // Dexterity Potion IV Recipe
dd #2512010 // Dexterity Potion V Recipe
dd #2512011 // Dexterity Potion VI Recipe
dd #2512012 // Dexterity Potion VII Recipe
dd #2512013 // Dexterity Potion VIII Recipe
dd #2512014 // Dexterity Potion IX Recipe
dd #2512015 // Dexterity Potion X Recipe
dd #2512016 // Intelligence Potion III Recipe
dd #2512017 // Intelligence Potion IV Recipe
dd #2512018 // Intelligence Potion V Recipe
dd #2512019 // Intelligence Potion VI Recipe
dd #2512020 // Intelligence Potion VII Recipe
dd #2512021 // Intelligence Potion VIII Recipe
dd #2512022 // Intelligence Potion IX Recipe
dd #2512023 // Intelligence Potion X Recipe
dd #2512024 // Luck Potion III Recipe
dd #2512025 // Luck Potion IV Recipe
dd #2512026 // Luck Potion V Recipe
dd #2512027 // Luck Potion VI Recipe
dd #2512028 // Luck Potion VII Recipe
dd #2512029 // Luck Potion VIII Recipe
dd #2512030 // Luck Potion IX Recipe
dd #2512031 // Luck Potion X Recipe
dd #2512032 // Attack Potion I Recipe
dd #2512033 // Attack Potion II Recipe
dd #2512034 // Attack Potion III Recipe
dd #2512035 // Attack Potion IV Recipe
dd #2512036 // Attack Potion V Recipe
dd #2512037 // Magic Attack Potion I Recipe
dd #2512038 // Magic Attack Potion II Recipe
dd #2512039 // Magic Attack Potion III Recipe
dd #2512040 // Magic Attack Potion IV Recipe
dd #2512041 // Magic Attack Potion V Recipe
dd #2512042 // Special Mano Transform Potion Recipe
dd #2512043 // Special Deo Transform Potion Recipe
dd #2512044 // Special King Clang Transform Potion Recipe
dd #2512045 // Special Zeno Transform Potion Recipe
dd #2512046 // Special Eliza Transform Potion Recipe
dd #2512047 // Special Balrog Transform Potion Recipe
dd #2512048 // Special Griffey Transform Potion Recipe
dd #2512049 // Advanced Health Potion Recipe
dd #2512050 // Advanced Health Pill Recipe
dd #2512051 // Advanced Mana Potion Recipe
dd #2512052 // Advanced Mana Pill Recipe
dd #2512053 // Health Boost Potion Recipe
dd #2512054 // Mana Boost Potion Recipe
dd #2512055 // Blessing Potion Recipe
dd #2512056 // Strength Boost Potion Recipe
dd #2512057 // Dexterity Boost Potion Recipe
dd #2512058 // Intelligence Boost Potion Recipe
dd #2512059 // Luck Boost Potion Recipe
dd #2512060 // Advanced Health Boost Potion Recipe
dd #2512061 // Advanced Mana Boost Potion Recipe
dd #2512062 // Advanced Blessing Potion Recipe
dd #2512063 // Advanced Strength Boost Potion Recipe
dd #2512064 // Advanced Dexterity Boost Potion Recipe
dd #2512065 // Advanced Intelligence Boost Potion Recipe
dd #2512066 // Advanced Luck Boost Potion Recipe
dd #2512067 // Basic Hero Potion Recipe
dd #2512068 // Advanced Hero Potion Recipe
dd #2512069 // Health Pill (1000) Recipe
dd #2512070 // Health Pill (1500) Recipe
dd #2512071 // Health Pill (2000) Recipe
dd #2512072 // Health Pill (2500) Recipe
dd #2512073 // Health Pill (3000) Recipe
dd #2512074 // Health Pill (3500) Recipe
dd #2512075 // Health Pill (4000) Recipe
dd #2512076 // Health Pill (5000) Recipe
dd #2512077 // Health Pill (6000) Recipe
dd #2512078 // Health Pill (7000) Recipe
dd #2512079 // Mana Pill (1000) Recipe
dd #2512080 // Mana Pill (1500) Recipe
dd #2512081 // Mana Pill (2000) Recipe
dd #2512082 // Mana Pill (2500) Recipe
dd #2512083 // Mana Pill (3000) Recipe
dd #2512084 // Mana Pill (3500) Recipe
dd #2512085 // Mana Pill (4000) Recipe
dd #2512086 // Mana Pill (5000) Recipe
dd #2512087 // Mana Pill (6000) Recipe
dd #2512088 // Mana Pill (7000) Recipe
dd #2512089 // Advanced Strength Potion I Recipe
dd #2512090 // Advanced Strength Potion II Recipe
dd #2512091 // Advanced Strength Potion III Recipe
dd #2512092 // Advanced Strength Potion IV Recipe
dd #2512093 // Advanced Strength Potion V Recipe
dd #2512094 // Advanced Strength Potion VI Recipe
dd #2512095 // Advanced Strength Potion VII Recipe
dd #2512096 // Advanced Strength Potion VIII Recipe
dd #2512097 // Advanced Strength Potion IX Recipe
dd #2512098 // Advanced Strength Potion X Recipe
dd #2512099 // Advanced Dexterity Potion I Recipe
dd #2512100 // Advanced Dexterity Potion II Recipe
dd #2512101 // Advanced Dexterity Potion III Recipe
dd #2512102 // Advanced Dexterity Potion IV Recipe
dd #2512103 // Advanced Dexterity Potion V Recipe
dd #2512104 // Advanced Dexterity Potion VI Recipe
dd #2512105 // Advanced Dexterity Potion VII Recipe
dd #2512106 // Advanced Dexterity Potion VIII Recipe
dd #2512107 // Advanced Dexterity Potion IX Recipe
dd #2512108 // Advanced Dexterity Potion X Recipe
dd #2512109 // Advanced Intelligence Potion I Recipe
dd #2512110 // Advanced Intelligence Potion II Recipe
dd #2512111 // Advanced Intelligence Potion III Recipe
dd #2512112 // Advanced Intelligence Potion IV Recipe
dd #2512113 // Advanced Intelligence Potion V Recipe
dd #2512114 // Advanced Intelligence Potion VI Recipe
dd #2512115 // Advanced Intelligence Potion VII Recipe
dd #2512116 // Advanced Intelligence Potion VIII Recipe
dd #2512117 // Advanced Intelligence Potion IX Recipe
dd #2512118 // Advanced Intelligence Potion X Recipe
dd #2512119 // Advanced Luck Potion I Recipe
dd #2512120 // Advanced Luck Potion II Recipe
dd #2512121 // Advanced Luck Potion III Recipe
dd #2512122 // Advanced Luck Potion IV Recipe
dd #2512123 // Advanced Luck Potion V Recipe
dd #2512124 // Advanced Luck Potion VI Recipe
dd #2512125 // Advanced Luck Potion VII Recipe
dd #2512126 // Advanced Luck Potion VIII Recipe
dd #2512127 // Advanced Luck Potion IX Recipe
dd #2512128 // Advanced Luck Potion X Recipe
dd #2512129 // Advanced Attack Potion I Recipe
dd #2512130 // Advanced Attack Potion II Recipe
dd #2512131 // Advanced Attack Potion III Recipe
dd #2512132 // Advanced Attack Potion IV Recipe
dd #2512133 // Advanced Attack Potion V Recipe
dd #2512134 // Advanced Magic Attack Potion I Recipe
dd #2512135 // Advanced Magic Attack Potion II Recipe
dd #2512136 // Advanced Magic Attack Potion III Recipe
dd #2512137 // Advanced Magic Attack Potion IV Recipe
dd #2512138 // Advanced Magic Attack Potion V Recipe
dd #2512139 // Strength Pill I Recipe
dd #2512140 // Strength Pill II Recipe
dd #2512141 // Strength Pill III Recipe
dd #2512142 // Strength Pill IV Recipe
dd #2512143 // Strength Pill V Recipe
dd #2512144 // Strength Pill VI Recipe
dd #2512145 // Strength Pill VII Recipe
dd #2512146 // Strength Pill VIII Recipe
dd #2512147 // Strength Pill IX Recipe
dd #2512148 // Strength Pill X Recipe
dd #2512149 // Advanced Strength Pill I Recipe
dd #2512150 // Advanced Strength Pill II Recipe
dd #2512151 // Advanced Strength Pill III Recipe
dd #2512152 // Advanced Strength Pill IV Recipe
dd #2512153 // Advanced Strength Pill V Recipe
dd #2512154 // Advanced Strength Pill VI Recipe
dd #2512155 // Advanced Strength Pill VII Recipe
dd #2512156 // Advanced Strength Pill VIII Recipe
dd #2512157 // Advanced Strength Pill IX Recipe
dd #2512158 // Advanced Strength Pill X Recipe
dd #2512159 // Dexterity Pill I Recipe
dd #2512160 // Dexterity Pill II Recipe
dd #2512161 // Dexterity Pill III Recipe
dd #2512162 // Dexterity Pill IV Recipe
dd #2512163 // Dexterity Pill V Recipe
dd #2512164 // Dexterity Pill VI Recipe
dd #2512165 // Dexterity Pill VII Recipe
dd #2512166 // Dexterity Pill VIII Recipe
dd #2512167 // Dexterity Pill IX Recipe
dd #2512168 // Dexterity Pill X Recipe
dd #2512169 // Advanced Dexterity Pill I Recipe
dd #2512170 // Advanced Dexterity Pill II Recipe
dd #2512171 // Advanced Dexterity Pill III Recipe
dd #2512172 // Advanced Dexterity Pill IV Recipe
dd #2512173 // Advanced Dexterity Pill V Recipe
dd #2512174 // Advanced Dexterity Pill VI Recipe
dd #2512175 // Advanced Dexterity Pill VII Recipe
dd #2512176 // Advanced Dexterity Pill VIII Recipe
dd #2512177 // Advanced Dexterity Pill IX Recipe
dd #2512178 // Advanced Dexterity Pill X Recipe
dd #2512179 // Intelligence Pill I Recipe
dd #2512180 // Intelligence Pill II Recipe
dd #2512181 // Intelligence Pill III Recipe
dd #2512182 // Intelligence Pill IV Recipe
dd #2512183 // Intelligence Pill V Recipe
dd #2512184 // Intelligence Pill VI Recipe
dd #2512185 // Intelligence Pill VII Recipe
dd #2512186 // Intelligence Pill VIII Recipe
dd #2512187 // Intelligence Pill IX Recipe
dd #2512188 // Intelligence Pill X Recipe
dd #2512189 // Advanced Intelligence Pill I Recipe
dd #2512190 // Advanced Intelligence Pill II Recipe
dd #2512191 // Advanced Intelligence Pill III Recipe
dd #2512192 // Advanced Intelligence Pill IV Recipe
dd #2512193 // Advanced Intelligence Pill V Recipe
dd #2512194 // Advanced Intelligence Pill VI Recipe
dd #2512195 // Advanced Intelligence Pill VII Recipe
dd #2512196 // Advanced Intelligence Pill VIII Recipe
dd #2512197 // Advanced Intelligence Pill IX Recipe
dd #2512198 // Advanced Intelligence Pill X Recipe
dd #2512199 // Luck Pill I Recipe
dd #2512200 // Luck Pill II Recipe
dd #2512201 // Luck Pill III Recipe
dd #2512202 // Luck Pill IV Recipe
dd #2512203 // Luck Pill V Recipe
dd #2512204 // Luck Pill VI Recipe
dd #2512205 // Luck Pill VII Recipe
dd #2512206 // Luck Pill VIII Recipe
dd #2512207 // Luck Pill IX Recipe
dd #2512208 // Luck Pill X Recipe
dd #2512209 // Advanced Luck Pill I Recipe
dd #2512210 // Advanced Luck Pill II Recipe
dd #2512211 // Advanced Luck Pill III Recipe
dd #2512212 // Advanced Luck Pill IV Recipe
dd #2512213 // Advanced Luck Pill V Recipe
dd #2512214 // Advanced Luck Pill VI Recipe
dd #2512215 // Advanced Luck Pill VII Recipe
dd #2512216 // Advanced Luck Pill VIII Recipe
dd #2512217 // Advanced Luck Pill IX Recipe
dd #2512218 // Advanced Luck Pill X Recipe
dd #2512219 // Defense Pill I Recipe
dd #2512220 // Defense Pill II Recipe
dd #2512221 // Defense Pill III Recipe
dd #2512222 // Defense Pill IV Recipe
dd #2512223 // Defense Pill V Recipe
dd #2512224 // Defense Pill VI Recipe
dd #2512225 // Defense Pill VII Recipe
dd #2512226 // Defense Pill VIII Recipe
dd #2512227 // Defense Pill IX Recipe
dd #2512228 // Defense Pill X Recipe
dd #2512229 // Advanced Defense Pill I Recipe
dd #2512230 // Advanced Defense Pill II Recipe
dd #2512231 // Advanced Defense Pill III Recipe
dd #2512232 // Advanced Defense Pill IV Recipe
dd #2512233 // Advanced Defense Pill V Recipe
dd #2512234 // Advanced Defense Pill VI Recipe
dd #2512235 // Advanced Defense Pill VII Recipe
dd #2512236 // Advanced Defense Pill VIII Recipe
dd #2512237 // Advanced Defense Pill IX Recipe
dd #2512238 // Advanced Defense Pill X Recipe
dd #2512239 // Attack Pill I Recipe
dd #2512240 // Attack Pill II Recipe
dd #2512241 // Attack Pill III Recipe
dd #2512242 // Attack Pill IV Recipe
dd #2512243 // Attack Pill V Recipe
dd #2512244 // Advanced Attack Pill I Recipe
dd #2512245 // Advanced Attack Pill II Recipe
dd #2512246 // Advanced Attack Pill III Recipe
dd #2512247 // Advanced Attack Pill IV Recipe
dd #2512248 // Advanced Attack Pill V Recipe
dd #2512249 // Magic Attack Pill I Recipe
dd #2512250 // Magic Attack Pill II Recipe
dd #2512251 // Magic Attack Pill III Recipe
dd #2512252 // Magic Attack Pill IV Recipe
dd #2512253 // Magic Attack Pill V Recipe
dd #2512254 // Advanced Magic Attack Pill I Recipe
dd #2512255 // Advanced Magic Attack Pill II Recipe
dd #2512256 // Advanced Magic Attack Pill III Recipe
dd #2512257 // Advanced Magic Attack Pill IV Recipe
dd #2512258 // Advanced Magic Attack Pill V Recipe

dd 00 // End of list

ItemFilter:
push edx
mov edx,[Mesos]
cmp eax,edx
jle FilterMesos
mov edx,ItemList
jmp RejectOrAccept

FilterMesos:
mov [edi+50],0
jmp End

RejectOrAccept:
cmp byte ptr [Mode],0
je AcceptFilter
cmp byte ptr [Mode],1
je RejectFilter

AcceptFilter:
cmp eax,[edx](Mesos)
je End
cmp dword ptr [edx],0
je Ignore
add edx,4
jmp AcceptFilter

RejectFilter:
cmp eax,[edx]
je Ignore
cmp dword ptr [edx],0
je End
add edx,4
jmp RejectFilter

Ignore:
cmp eax,#50000 // Added this code otherwise mesos is dropped but not shown in accept mode
jle End
mov eax,0

End:
pop edx
mov ecx,ebx // Original Opcode
mov [edi+50],eax // Original Opcode
jmp Return

0113689C:
jmp ItemFilter
Return:

[DISABLE]
0113689C: // f3 ? ? ? ? ? ? ? f3 ? ? ? ? ? ? ? e8 ? ? ? ? 8b ? 89 ? ? e8 below
mov ecx,ebx
mov [edi+50],eax

dealloc(ItemFilter)
dealloc(ItemList)
dealloc(Mesos)
dealloc(Mode)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>126</ID>
      <Description>"CPU Hacks"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>127</ID>
          <Description>"Remove Platforms"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>
[Enable]
01536F43: //E8 ? ? ? ? 8B ? 8B ? 6A 01 FF 50 ? 8B CE E8 ? ? ? ? 8B CE E8 ? ? ? ? 6A 00
db 90 90 90 90 90

[Disable]
01536F43:
call 0153CC60
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>128</ID>
          <Description>"Remove Background"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]
01536F4E: //FF 50 ? 8B CE E8 ? ? ? ? 8B CE E8 ? ? ? ? 6A 00
db 90 90 90

[Disable]
01536F4E:
call dword ptr [eax+1C]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>129</ID>
          <Description>"No Mob Reaction"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>
//No Mob Reaction
//55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 83 EC ? 53 56 57 A1 ? ? ? ? 33 C5 50 8D 45 ? 64 A3 00 00 00 00 8B F9 89 ? ? 8B ? ? ? ? ? C7 ? ? ? ? ? ? 85 ? 74
//FF ? ? ? ? ? E8 ? ? ? ? 8B ? ? 50 C6 ? ? ? E8 ? ? ? ? C6 &lt;-- If using this one, Offset + 5 then follow call to find offset

define(Address,015B83A0) //Function start push ebp: 55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 83 EC ? 53 56 57 A1 ? ? ? ? 33 C5 50 8D 45 ? 64 A3 00 00 00 00 8B F9 89 7D F0 8B 0D ? ? ? ? C7 45 FC ? ? ? ? 85 C9

[Enable]
Address:
ret 0074

[Disable]
Address:
push ebp
mov ebp,esp
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>138</ID>
          <Description>"No Loot Animation"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
00EA8236: // Remove loot animation
db 0F 8C

[DISABLE]
00EA8236: // 0F 8D ? ? 00 00 85 ? 0F 84 ? ? 00 00 C7 45 EC FF 00 00 00 81 F9 ? ? 00 00
db 0F 8D
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>135</ID>
          <Description>"Hide Most Skill Animations"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(CMob_ShowHitEffect,015E1AF0)      // 57 8B F9 E8 ? ? ? ? 50 E8 ? ? 00 00 83 C4 04
define(CUser_ShowSkillEffect,0232C670)   // 6A 00 6A 00 6A 00 68 FF FF FF 7F 6A 00 6A 06 56 F2 [follow call below]

[enable]
CMob_ShowHitEffect:
ret 0004

CUser_ShowSkillEffect:
ret 0040

[disable]
CMob_ShowHitEffect:
db 57 8B F9

CUser_ShowSkillEffect:
db 55 8B EC
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>134</ID>
          <Description>"No Mob Death/Spawn Animation"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(noSpawnAni, 015C4F94) //  0F 8E ?? ?? 00 00 8B ? 33 ? E8
define(CMob_OnDie, 015B9630)//   55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 81 EC F0 00 00 00 53 ? 57 A1 ? ? ? ? 33 C5 50 8D 45 ? 64 A3 00 00 00 00 8B D9 89 5D ? C7 45

[ENABLE]
noSpawnAni:
db 90 90 90 90 90 90

CMob_OnDie:
ret

[DISABLE]
noSpawnAni:
db 0F 8E 13 02 00 00

CMob_OnDie:
push ebp

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>132</ID>
          <Description>"No Fade Stage"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(removeFadeIn, 018BD52F) // 0F 84 ? ? ? ? 8B 35 ? ? ? ? 85 F6 74 ? 8B CE E8 ? ? ? ? 84
define(removeFadeOut, 018BDB8F) // 0F 84 ? ? 00 00 8B 1D ? ? ? ? 89 ? ? 85 DB 74

[ENABLE]
removeFadeIn: // CStage::FadeIn
db 90 E9

removeFadeOut: // CStage::FadeOut
db 90 E9

[DISABLE]
removeFadeIn:
db 0F 84 13 06 00 00

removeFadeOut:
db 0F 84 19 0D 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>133</ID>
          <Description>"No Multi Kill"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
02F148BC:
ret

[disable]
02F148BC: // String search Effect/BasicEff.img/MultiKill/ [First]
db 45
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>131</ID>
          <Description>"No Blue Box"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
0259EFC0: //No Blue Box (so you don't crash on rope/etc)
ret

[DISABLE]
//E8 ? ? ? ? 8B C8 E8 ? ? ? ? E8 ? ? ? ? 83 C4 1C 33 F6 EB [FIRST 2 CALLS BELOW]
0259EFC0: //55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 83 EC ? 53 56 57 A1 ? ? ? ? 33 C5 50 8D ? ? 64 A3 00 00 00 00 C7 ? ? 00 00 00 00 E8 ? ? ? ? 83 7D ? 00 75 ?
push ebp
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>137</ID>
          <Description>"No Skill Sounds"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(NoSkillSounds, 02583360) //  55 8B EC 6A FF 68 ? ? ? ? 64 A1 00 00 00 00 50 81 EC 8C 00 00 00 53 56 57 A1 ? ? ? ? 33 C5 50 8D 45 F4 64 A3 00 00 00 00 33

[ENABLE]
NoSkillSounds:
ret

[DISABLE]
NoSkillSounds:
push ebp
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>136</ID>
          <Description>"No Item Floating"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]
01131886:
db F2 0F 59

[Disable]
01131886: // F2 ? ? ? ? ? ? ? F2 ? ? ? ? ? ? ? F2 ? ? ? ? ? ? ? F2 ? ? ? ? ? ? ? E8 [Third result] [fourth result]
db F2 0F 5E
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Disarm1</Name>
      <Address>0105A070</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Disarm_2</Name>
      <Address>0105A64A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Disarm_3</Name>
      <Address>01048C90</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fusionattack_return</Name>
      <Address>01061664</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HookRet</Name>
      <Address>07040000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>J_DA1</Name>
      <Address>010570C0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>J_DA2</Name>
      <Address>01C48ACC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>J_DA3</Name>
      <Address>01D21378</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GN_D</Name>
      <Address>01C9430B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>h_1</Name>
      <Address>01D24488</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>h_2</Name>
      <Address>01D24494</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>h_3</Name>
      <Address>01D244F3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>h_4</Name>
      <Address>01D24613</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>h_5</Name>
      <Address>01D24685</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>h_6</Name>
      <Address>01D24692</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>itemvac</Name>
      <Address>497D0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"MapleStory.exe"+9D6FA0</Address>
      <Comment>blazing cosa
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
